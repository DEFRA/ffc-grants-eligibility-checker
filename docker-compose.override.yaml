services:
  ffc-grants-eligibility-checker:
    build:
      context: .
      target: development
    depends_on:
      - redis
      - emulator
    image: ffc-grants-eligibility-checker-development
    # platform: ${PLATFORM}
    environment:
      NODE_ENV: development
      USE_REDIS: true
      REDIS_HOSTNAME: redis # Use the Docker service name to connect
      REDIS_PASSWORD: '' # Add if needed
      SESSION_CACHE_TTL: 3600000
    networks:
      - default
      - sb-emulator

  ffc-grants-eligibility-checker2:
    build:
      context: .
      target: development
    depends_on:
      - redis
      - emulator
    image: ffc-grants-eligibility-checker-development
    # platform: ${PLATFORM}
    environment:
      NODE_ENV: development
      USE_REDIS: true
      REDIS_HOSTNAME: redis # Use the Docker service name to connect
      REDIS_PASSWORD: '' # Add if needed
      REDIS_PARTITION: ffc-grants-eligibility-checker
      COOKIE_PASSWORD: thisistestcookiepasswordthisistestcookiepasswordthisistestcookiepassword
      SESSION_CACHE_TTL: 3600000
    networks:
      - default
      - sb-emulator

  reverse-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - '80:80' # Expose port 80 on the host and forward to Nginx
    volumes:
      - ./nginx.local.conf:/etc/nginx/nginx.conf # Mount your custom Nginx config
      - ./nginx_logs:/var/log/nginx # Mount Nginx logs to host machine
    depends_on:
      - ffc-grants-eligibility-checker
      - ffc-grants-eligibility-checker2

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    ports:
      - '6383:6379'

  emulator:
    container_name: "servicebus-emulator"
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest
    volumes:
      - "${CONFIG_PATH:-./src/config/notification/local-service-bus.json}:/ServiceBus_Emulator/ConfigFiles/Config.json"
    ports:
      - "5672:5672"
    environment:
      SQL_SERVER: sqledge  
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD:-Testing123}
      ACCEPT_EULA: ${ACCEPT_EULA:-Y}
    depends_on:
      - sqledge
    networks:
      sb-emulator:
        aliases:
          - "sb-emulator"
          
  sqledge:
    container_name: "sqledge"
    image: "mcr.microsoft.com/azure-sql-edge:1.0.7"
    platform: linux/arm64
    privileged: true
    user: root
    volumes:
      - sqldata:/var/opt/mssql/data
      - sqllog:/var/opt/mssql/log
      - sqlsecrets:/var/opt/mssql/secrets
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_DATA_DIR: /var/opt/mssql/data
      MSSQL_LOG_DIR: /var/opt/mssql/data
      MSSQL_BACKUP_DIR: /var/opt/mssql/data
      MSSQL_PID: 'Developer'
      MSSQL_LCID: 1033
      MSSQL_COLLATION: SQL_Latin1_General_CP1_CI_AS
      MSSQL_TCP_PORT: "1433"
    networks:
      sb-emulator:
        aliases:
          - "sqledge"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$MSSQL_SA_PASSWORD" -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

volumes:
  redis_data:
  sqldata:
  sqllog:
  sqlsecrets:

networks:
  sb-emulator:
